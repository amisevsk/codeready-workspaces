#!/usr/bin/env groovy

// PARAMETERS for this pipeline:
// branchToBuildCRW = codeready-workspaces branch to build: */2.0.x or */master
// branchToBuildCheTheia = che-theia branch to build: refs/tags/7.0.0, */7.2.0, or */master
// che_theia_version = 7.2.0 or master
// che_theia_tag = 7.2.0 or next
// che_theia_branch = 7.2.0 or master
// che_theia_gitref = refs/heads/7.2.0 or refs/heads/master
// node == slave label, eg., rhel7-devstudio-releng-16gb-ram||rhel7-16gb-ram||rhel7-devstudio-releng||rhel7 or rhel7-32gb||rhel7-16gb||rhel7-8gb
// GITHUB_TOKEN = (github token)
// USE_PUBLIC_NEXUS = true or false (if true, don't use https://repository.engineering.redhat.com/nexus/repository/registry.npmjs.org)

def installNPM(){
	def nodeHome = tool 'nodejs-10.15.3'
	env.PATH="${nodeHome}/bin:${env.PATH}"
	sh "echo USE_PUBLIC_NEXUS = ${USE_PUBLIC_NEXUS}"
	if ("${USE_PUBLIC_NEXUS}".equals("false")) {
		sh '''#!/bin/bash -xe

echo '
registry=https://repository.engineering.redhat.com/nexus/repository/registry.npmjs.org/
cafile=/etc/pki/ca-trust/source/anchors/RH-IT-Root-CA.crt
strict-ssl=false
virtual/:_authToken=credentials
always-auth=true
' > ${HOME}/.npmrc

echo '
# registry "https://repository.engineering.redhat.com/nexus/repository/registry.npmjs.org/"
registry "https://registry.yarnpkg.com"
cafile /etc/pki/ca-trust/source/anchors/RH-IT-Root-CA.crt
strict-ssl false
' > ${HOME}/.yarnrc

cat ${HOME}/.npmrc
cat ${HOME}/.yarnrc

npm install --global yarn
npm config get; yarn config get list
npm --version; yarn --version
'''
	}
	else
	{
		sh '''#!/bin/bash -xe
rm -f ${HOME}/.npmrc ${HOME}/.yarnrc
npm install --global yarn
npm --version; yarn --version
'''
	}
}

timeout(120) {
	node("${node}"){ stage "Build Theia"
		cleanWs()
		// for private repo, use checkout(credentialsId: 'devstudio-release')
		checkout([$class: 'GitSCM', 
			branches: [[name: "${branchToBuildCRW}"]], 
			doGenerateSubmoduleConfigurations: false, 
			poll: true,
			extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "crw"]], 
			submoduleCfg: [], 
			userRemoteConfigs: [[url: "https://github.com/redhat-developer/codeready-workspaces.git"]]])
		// checkout([$class: 'GitSCM', 
		// 	branches: [[name: "${branchToBuildCheTheia}"]], 
		// 	doGenerateSubmoduleConfigurations: false, 
		// 	poll: true,
		// 	extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "che-theia"]], 
		// 	submoduleCfg: [], 
		// 	userRemoteConfigs: [[url: "https://github.com/eclipse/che-theia.git"]]])
		installNPM()
		sh "export GITHUB_TOKEN=${GITHUB_TOKEN}"
		// sh 'printenv | sort'

		// CRW-360 use RH NPM mirror
		if ("${USE_PUBLIC_NEXUS}".equals("false")) {
			sh '''#!/bin/bash -xe 
			for d in $(find . -name yarn.lock -o -name package.json); do 
				sed -i $d 's|https://registry.yarnpkg.com/|https://repository.engineering.redhat.com/nexus/repository/registry.npmjs.org/|g'
			'''
		}

		// check available disk space -- might need to do some cleanup if this slave is getting full
		sh '''#!/bin/bash -xe 
		df -h  ${WORKSPACE} /tmp / /home/hudson/static_build_env /qa/tools
		'''

		// increase verbosity of yarn calls to we can log what's being downloaded from 3rd parties
		sh '''#!/bin/bash -xe 
		for d in $(find . -name package.json); do sed -i $d -e 's#yarn #yarn --verbose #g'; done
		'''

		// TODO make this a for loop or split into stages
		//sh '''#!/bin/bash -xe //'''
		def BUILD_PARAMS="--skip-tests --build-args:GITHUB_TOKEN=${GITHUB_TOKEN},THEIA_VERSION=${che_theia_version} \
--tag:${che_theia_tag} --branch:${che_theia_branch} --git-ref:${che_theia_gitref}"
		sh '''#!/bin/bash -xe
		mkdir -p ${WORKSPACE}/logs/
		for d in theia-dev theia; do # TODO: build these only if we need them: theia-endpoint-runtime remote-plugin-java8 remote-plugin-openshift-connector-0.0.21 etc.
			pushd ${WORKSPACE}/crw/dependencies/che-theia/dockerfiles/${d} >/dev/null
				./build.sh ${BUILD_PARAMS} | tee ${WORKSPACE}/logs/crw_che-theia_${d}_buildlog.txt
			popd >/dev/null
		done
		'''

		// for now since build.sh is stupid, comment out the images we don't want to build
		// sh '''#!/bin/bash -xe 
		// sed -i che-theia/docker_image_build.include \
		// 	-e "s|dockerfiles/remote-plugin\\(.\\+\\)|# dockerfiles/remote-plugin\\1|g" \
		// 	-e "s|dockerfiles/theia-endpoint-runtime|# dockerfiles/theia-endpoint-runtime|g" && egrep -v "^#" che-theia/docker_image_build.include 
		// cd che-theia && ./build.sh ${BUILD_PARAMS}
		// '''
		
		// check available disk space -- might need to do some cleanup if this slave is getting full
		sh '''#!/bin/bash -xe 
		df -h  ${WORKSPACE} /tmp / /home/hudson/static_build_env /qa/tools
		'''

		// TODO verify this works & is archived correctly
		// tar up the node modules and other 3rd party deps from the generated containers so we can inject them into the Brew builds
		sh '''#!/bin/bash -xe
		docker image ls | egrep "theia|eclipse"

		# includes Theia sources
		# CONTAINERNAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep eclipse/che-theia-builder-e2e | head -1) && \
		# CONTENT_TO_ARCHIVE="projects" && \
		# PATHNAME="/tmp/che-theia/dockerfiles/theia-dev/target" && \
		# TARNAME="$(echo ${CONTAINERNAME//:/--} | tr "/" "_")__${CONTENT_TO_ARCHIVE}.tgz" && \
		# mkdir -p ${PATHNAME} && cd ${PATHNAME} && \
		# docker run --name ${TARNAME} --rm --mount type=bind,source=${PATHNAME},target=/out ${CONTAINERNAME} /bin/bash -c "tar czf /out/${TARNAME} /${CONTENT_TO_ARCHIVE}" && \
		# echo "Created ${PATHNAME}/${TARNAME}"
		'''
		// TODO repeat for other builds - pull more container content out as tarballs

		// TODO verify this works & is archived correctly
		archiveArtifacts fingerprint: true, artifacts: "\
			${WORKSPACE}/crw/dependencies/che-theia/dockerfiles/theia-dev/generator/eclipse-che-theia-generator.tgz, \
			${WORKSPACE}/crw/dependencies/che-theia/dockerfiles/theia/che-theia/*, \
			${WORKSPACE}/logs/*buildlog.txt \
		"

		def descriptString="Build #${BUILD_NUMBER} (${BUILD_TIMESTAMP}) <br/> :: ${che_theia_version}, ${che_theia_tag}, ${che_theia_branch}"
		echo "${descriptString}"
		currentBuild.description="${descriptString}"
	}
}

// TODO enable downstream image builds
// timeout(120) {
// 	node("${node}"){ stage "Run get-sources-rhpkg-container-build"
// 		def QUAY_REPO_PATHs=(env.ghprbPullId && env.ghprbPullId?.trim()?"":("${SCRATCH}"=="true"?"":"server-rhel8"))

// 		def matcher = ( "${JOB_NAME}" =~ /.*_(stable-branch|master).*/ )
// 		def JOB_BRANCH= (matcher.matches() ? matcher[0][1] : "stable-branch")

// 		echo "[INFO] Trigger get-sources-rhpkg-container-build " + (env.ghprbPullId && env.ghprbPullId?.trim()?"for PR-${ghprbPullId} ":"") + \
// 		"with SCRATCH = ${SCRATCH}, QUAY_REPO_PATHs = ${QUAY_REPO_PATHs}, JOB_BRANCH = ${JOB_BRANCH}"

// 		// trigger OSBS build
// 		build(
// 		  job: 'get-sources-rhpkg-container-build',
// 		  wait: false,
// 		  propagate: false,
// 		  parameters: [
// 			[
// 			  $class: 'StringParameterValue',
// 			  name: 'GIT_PATH',
// 			  value: "containers/codeready-workspaces",
// 			],
// 			[
// 			  $class: 'StringParameterValue',
// 			  name: 'GIT_BRANCH',
// 			  value: "crw-2.0-rhel-8",
// 			],
// 			[
// 			  $class: 'StringParameterValue',
// 			  name: 'QUAY_REPO_PATHs',
// 			  value: "${QUAY_REPO_PATHs}",
// 			],
// 			[
// 			  $class: 'StringParameterValue',
// 			  name: 'SCRATCH',
// 			  value: "${SCRATCH}",
// 			],
// 			[
// 			  $class: 'StringParameterValue',
// 			  name: 'JOB_BRANCH',
// 			  value: "${JOB_BRANCH}",
// 			]
// 		  ]
// 		)
// 	}
// }
